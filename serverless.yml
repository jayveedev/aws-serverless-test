org: jayvee
app: aws-automations
service: main

frameworkVersion: '4'

build:
  esbuild:
    bundle: true
    minify: false
    exclude:
      - '@aws-sdk/*'
      - '@serverless/*'
      - 'dynamodb-admin/*'
      - 'eslint/*'
      - 'serverless/*'
      - 'serverless-cloudflare-tunnel/*'
      - 'serverless-dynamodb/*'
      - 'serverless-dynamodb-ttl/*'
      - 'serverless-offline/*'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: default
  tracing:
    apiGateway: true
    lambda: true
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    APP: ${self:app}
    SERVICE: ${self:service}
    NODE_NO_WARNINGS: 1
    NODE_OPTIONS: '--enable-source-maps'
    AWS_ACCOUNT_ID: { Ref: 'AWS::AccountId' }
    LAMBDA_URL:
      {
        'Fn::Join':
          [
            '',
            [
              'https://',
              { 'Ref': 'ApiGatewayRestApi' },
              '.execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/',
            ],
          ],
      }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - lambda:InvokeFunction
            - iam:PassRole
            - cloudwatch:PutMetricData
          Resource: '*'

functions:
  main:
    handler: src/main.main
    events:
      - http:
          method: get
          path: test
          cors: true

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverless-offline:
    httpPort: 3005

package:
  patterns:
    - '!.dynamodb/**'
    - '!.idea/**'
    - '!.vscode/**'
    - '!README.md'
    - '!.eslintrc.json'
  excludeDevDependencies: true
